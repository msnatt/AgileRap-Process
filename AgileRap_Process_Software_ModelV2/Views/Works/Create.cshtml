@model IEnumerable<AgileRap_Process_Software_ModelV2.Models.Work>

@{
    ViewData["Title"] = "Create";
}


<h1>สร้างรายการงาน</h1>
<br />
<br />
<table class="table table-borlesses">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CreateDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Project)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DueDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreateBy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProviderList)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StatusID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Remark)
            </th>
            <th>
                @Html.DisplayName("Manage")
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Where(m => m != Model.Last()))
        {
            @Html.HiddenFor(m => item.ID)
            @Html.HiddenFor(m => item.HeaderID)
            @Html.HiddenFor(m => item.Project)
            @Html.HiddenFor(m => item.Name)
            @Html.HiddenFor(m => item.DueDate)
            @Html.HiddenFor(m => item.CreateBy)
            @Html.HiddenFor(m => item.CreateDate)
            @Html.HiddenFor(m => item.UpdateBy)
            @Html.HiddenFor(m => item.UpdateDate)
            @Html.HiddenFor(m => item.ProviderList)
            @Html.HiddenFor(m => item.Status)
            @Html.HiddenFor(m => item.StatusID)
            @Html.HiddenFor(m => item.Remark)
            @Html.HiddenFor(m => item.IsDelete)

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CreateDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Project)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td >
                    @Html.DisplayFor(modelItem => item.DueDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreateBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ProviderList)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StatusID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remark)
                </td>
                <td>
                    @* @Html.ActionLink("History", "History", "Works", new { id = item.ID }, "") | *@
                    @* @Html.ActionLink("Edit", "Edit", "Works", new { id = item.ID }, "") *@
                </td>
            </tr>
        }
        @using (Html.BeginForm("Create", "Works", FormMethod.Post, new { id = "manageform", name = "manageform", enctype = "multipart/form-data" }))
        {
            <tr>
                @Html.HiddenFor(m => m.Last().ID)
                @Html.HiddenFor(m => m.Last().CreateDate)
                @Html.HiddenFor(m => m.Last().UpdateDate)
                @Html.HiddenFor(m => m.Last().IsDelete)
                @Html.HiddenFor(m => m.Last().ProviderIDs)
                @Html.HiddenFor(m => m.Last().IsSelectAll)
                <td>
                    @Html.DisplayFor(m => m.Last().CreateDate)
                </td>
                <td>
                    @Html.EditorFor(m => m.Last().Project)
                </td>
                <td>
                    @Html.EditorFor(m => m.Last().Name)
                </td>  
                <td>
                    @Html.EditorFor(m => m.Last().DueDate)
                </td>
                <td>
                    @Html.EditorFor(m => m.Last().CreateBy)
                </td>
                <td>
                    <select hidden id="select-tops-options" asp-items="@ViewBag.UserBag" multiple>
                    </select>
                </td>
                <td>
                    @Html.DropDownListFor(m => m.Last().StatusID, new SelectList(ViewBag.StatusBag, "Value", "Text"), "Please Select", new { @class = "form-select" })
                </td>
                <td>
                    @Html.EditorFor(m => m.Last().Remark)
                </td>
                <td>
                    <input type="submit" value="submit" class="btn btn-success" />
                </td>
            </tr>
        }
    </tbody>
</table>
<script>
    ﻿document.addEventListener("DOMContentLoaded",
    () => {

        $('#select-tops-options').multiselect({
            buttonClass: 'form-select',
            nonSelectedText: 'Select toppings',
            buttonContainer: '<div class="btn-danger" id="select-tops-options-container"></div>',
            selectedClass: 'active multiselect-selected',
            numberDisplayed: 5,
            buttonWidth: '18em',
            includeSelectAllOption: true,
            onSelectAll: function (options) {
                document.getElementById("IsSelectAll").value = true;
            },
            onDeselectAll: function (options) {
                document.getElementById("IsSelectAll").value = false;
            },
            //includeResetOption: true,
            //selectAllName: 'select-all-name',
            onChange: function (option, checked) {
                /*
                 * Not there yet
                 */
                document.getElementById("IsSelectAll").value = false;

                if (checked) {
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "true";
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "true";
                } else {
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "false";
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "false";
                }
                
                //$("#select-tops-options").multiselect('deselect', '1');
                var toppings = $('#select-tops-options option:selected');

                var selected = [];
                $(toppings).each(function (index, item) {
                    selected.push([$(this).val()]);
                });

                document.getElementById("ProviderIDs").value = selected.join(',');
            },
            templates: {
                button:
                    '<button type="button" class="multiselect dropdown-toggle" ' +
                    'data-bs-toggle="dropdown"><span class="multiselect-selected-text"></span></button>',
                resetButton: '<div class="multiselect-reset text-center p-2"><button type="button" class="btn btn-sm btn-danger"></button></div>'
            }
        });

    });



</script>
