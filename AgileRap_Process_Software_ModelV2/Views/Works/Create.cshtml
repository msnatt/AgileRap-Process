@model IEnumerable<AgileRap_Process_Software_ModelV2.Models.Work>

@{
    ViewData["Title"] = "Create";
    Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable<SelectListItem> UserBag = ViewBag.UserBag;
    Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable<SelectListItem> StatusBag = ViewBag.StatusBag;
    Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable<User> Luser = ViewBag.UserLogin;
}

<div class="row">
    <div class="offset-md-1 col-md-3">
        <h1>สร้างรายการงาน</h1>
    </div>
    <div class="col-md-8 text-end">
        @Luser.First().Name
        @Html.ActionLink("Logout", "Index", "Home", new { }, new { @class = "btn-outline-secondary" })
    </div>
</div>
<br />
<br />
@using (Html.BeginForm("Create", "Works", FormMethod.Get, new {}))
{
    @Html.Hidden("IsSelect")
    @Html.Hidden("AssignTo")
    <div class="row">
        <div id="DivOperatorBtn" class="col-md-1 text-end" style="padding:1px;">
            <input id="OperatorBtn" value="Operator" type="button" class="btn btn-outline-success" onclick="FuncOperator()" />
        </div>
        <div id="DivControllerBtn" class="col-md-1" style="padding:1px;">
            <input id="ControllerBtn" value="Controller" type="button" class="btn btn-outline-danger" onclick="FuncController()" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-auto">
            @Html.DisplayNameFor(b => b.First().CreateBy)
        </div>
        <div class="col-md-1">
            @Html.DropDownList("AssignBy", new SelectList(UserBag, "Value", "Text",Context.Session.GetString("AssignBy")), "Select Requester", new { @class = "form-select" })
        </div>
        <div class="col-auto">
            @Html.DisplayNameFor(b => b.First().ProviderList)
        </div>
        <div class="col-md-2">
            @* @Html.DropDownList("AssignTo", new SelectList(UserBag, "Value", "Text"), "Select Provider", new { @class = "form-select" }) *@
            <select hidden id="select-filter-options" asp-items="@ViewBag.UserFilterBag" multiple >
            </select>

        </div>
        <div class="col-auto">
            @Html.DisplayNameFor(b => b.First().Project)
        </div>
        <div class="col-md-2">
            @Html.DropDownList("Project", new SelectList(UserBag, "Value", "Text",Context.Session.GetString("Project")), "Select Project", new { @class = "form-select" })
        </div>
        <div class="col-auto">
            @Html.DisplayNameFor(b => b.First().StatusID)
        </div>
        <div class="col-md-2">
            @Html.DropDownList("Status", new SelectList(UserBag, "Value", "Text",Context.Session.GetString("Status")), "Select Status", new { @class = "form-select" })
        </div>
        <div class="col-md-1">
            <input value="Search" type="submit" class="btn btn-dark"  />
        </div>
    </div>
}
<table class="table table-borlesses">
    <thead>
        <tr>
            <th width="120px" class="text-center">
                @Html.DisplayNameFor(model => model.CreateDate)
            </th>
            <th width="150px" class="text-center">
                @Html.DisplayNameFor(model => model.Project)
            </th>
            <th width="200px" class="text-center">
                @Html.DisplayNameFor(model => model.Name)
            </th >
            <th class="text-center">
                @Html.DisplayNameFor(model => model.DueDate)
            </th>
            <th class="text-center">
                @Html.DisplayNameFor(model => model.CreateBy)
            </th>
            <th class="text-center">
                @Html.DisplayNameFor(model => model.ProviderList)
            </th>
            <th class="text-center">
                @Html.DisplayNameFor(model => model.StatusID)
            </th >
            <th width="400px" class="text-center">
                @Html.DisplayNameFor(model => model.Remark)
            </th>
            <th width="100px" class="text-center">
                @Html.DisplayName("Manage")
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Where(m => m != Model.Last()))
        {
            <tr>
                <td width="100px" class="text-center">
                    @Html.DisplayFor(modelItem => item.CreateDate)
                </td>
                <td width="80px" class="text-center">
                    @Html.DisplayFor(modelItem => item.Project)
                </td>
                <td width="70px" class="text-center">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td width="50px" class="text-center">
                    @Html.DisplayFor(modelItem => item.DueDate)
                </td>
                <td class="text-center">
                    @Html.DisplayFor(modelItem => UserBag.Where(b =>b.Value == item.CreateBy.ToString()).First().Text)
                </td>
                <td class="text-center">
                    @Html.DisplayFor(modelItem => item.ProviderList)
                </td>
                <td class="text-center">
                    @Html.DisplayFor(modelItem => item.Status.StatusName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remark)
                </td>
                <td>

                </td>
            </tr>
        }
        @using (Html.BeginForm("Create", "Works", FormMethod.Post, new { id = "CreateForm", name = "CreateForm", enctype = "multipart/form-data" }))
        {
            <tr>
                @Html.HiddenFor(m => m.Last().ID)
                @Html.HiddenFor(m => m.Last().CreateBy)
                @Html.HiddenFor(m => m.Last().CreateDate)
                @Html.HiddenFor(m => m.Last().UpdateDate)
                @Html.HiddenFor(m => m.Last().IsDelete)
                @Html.HiddenFor(m => m.Last().StatusID)
                @Html.HiddenFor(m => m.Last().ProviderIDs)
                @Html.HiddenFor(m => m.Last().ProviderList)
                @Html.HiddenFor(m => m.Last().IsSelectAll)
                @Html.Hidden("UserID", Luser.First().ID)

                <td class="text-center">
                    @Html.DisplayFor(m => m.Last().CreateDate)
                </td>
                <td>
                    @Html.EditorFor(m => m.Last().Project,new {htmlAttributes = new {@class = "form-control" }})
                </td>
                <td>
                    @Html.EditorFor(m => m.Last().Name ,new {htmlAttributes = new {@class = "form-control" }})
                </td>  
                <td>
                    @Html.EditorFor(m => m.Last().DueDate ,new {htmlAttributes = new {@class = "form-control", @style = "width:150px", onchange = "FuncUpdateStatus()"}})
                </td>
                <td class="text-center">
                    @Html.DropDownListFor(m => m.Last().CreateBy,new SelectList(ViewBag.UserBag,"Value","Text",Model.Last().CreateBy),"Select",new {@class = "", @style = "width:100px", hidden="hidden"})
                    @Html.DisplayFor(m => Luser.First().Name)
                </td>
                <td>
                    <select hidden id="select-tops-options" asp-items="@ViewBag.UserBag" multiple >
                    </select>
                </td>
                <td>
                    @Html.DisplayFor(m=>StatusBag.Where(b=>b.Value == Model.Last().StatusID.ToString()).First().Text)
                </td>
                <td>
                    @Html.EditorFor(m => m.Last().Remark ,new {htmlAttributes = new {@class = "form-control" }})
                </td>
                <td>
                    <input type="submit" value="submit" class="btn btn-success" style="width:100px" />
                    @Html.ActionLink("Cancel", "Index", "Works", new {id = Luser.First().ID},new {@class = "btn btn-danger", style = "width:100px"})
                </td>
            </tr>
        }
    </tbody>
</table>
<script>
    ﻿document.addEventListener("DOMContentLoaded",
    () => {

        $('#select-tops-options').multiselect({
            buttonClass: 'form-select',
            nonSelectedText: 'Select Provider',
            buttonContainer: '<div class="btn-success" id="select-tops-options-container"></div>',
            selectedClass: 'active multiselect-selected',
            numberDisplayed: 5,
            buttonWidth: '10em',
            includeSelectAllOption: true,
            onSelectAll: function (options) {
                document.getElementById("IsSelectAll").value = true;
            },
            onDeselectAll: function (options) {
                document.getElementById("IsSelectAll").value = false;
            },
            //includeResetOption: true,
            //selectAllName: 'select-all-name',
            onChange: function (option, checked) {
                /*
                 * Not there yet
                 */
                document.getElementById("IsSelectAll").value = false;

                if (checked) {
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "true";
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "true";
                } else {
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "false";
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "false";
                }
                
                //$("#select-tops-options").multiselect('deselect', '1');
                var toppings = $('#select-tops-options option:selected');

                var selected = [];
                $(toppings).each(function (index, item) {
                    selected.push([$(this).val()]);
                });

                document.getElementById("ProviderIDs").value = selected.join(',');
            },
            templates: {
                button:
                    '<button type="button" class="multiselect dropdown-toggle" ' +
                    'data-bs-toggle="dropdown"><span class="multiselect-selected-text"></span></button>',
                resetButton: '<div class="multiselect-reset text-center p-2"><button type="button" class="btn btn-sm btn-danger"></button></div>'
            }
        });

        $('#select-filter-options').multiselect({
            buttonClass: 'form-select',
            nonSelectedText: 'Select Provider',
            buttonContainer: '<div class="btn-success" id="select-tops-options-container"></div>',
            selectedClass: 'active multiselect-selected',
            numberDisplayed: 5,
            buttonWidth: '10em',
            includeSelectAllOption: true,
            onSelectAll: function (options) {
                document.getElementById("IsSelect").value = true;
            },
            onDeselectAll: function (options) {
                document.getElementById("IsSelect").value = false;
            },
            //includeResetOption: true,
            //selectAllName: 'select-all-name',
            onChange: function (option, checked) {
                /*
                 * Not there yet
                 */
                document.getElementById("IsSelect").value = false;

                if (checked) {
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "true";
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "true";
                } else {
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "false";
                    document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "false";
                }
                
                //$("#select-tops-options").multiselect('deselect', '1');
                var toppings = $('#select-filter-options option:selected');

                var selected = [];
                $(toppings).each(function (index, item) {
                    selected.push([$(this).val()]);
                });

                document.getElementById("AssignTo").value = selected.join(',');
            },
            templates: {
                button:
                    '<button type="button" class="multiselect dropdown-toggle" ' +
                    'data-bs-toggle="dropdown"><span class="multiselect-selected-text"></span></button>',
                resetButton: '<div class="multiselect-reset text-center p-2"><button type="button" class="btn btn-sm btn-danger"></button></div>'
            }
        });


    });

    // document.addEventListener("change", () => {
    //     var statusE = document.getElementById("StatusID");
    //     var DuedateE = document.getElementById("DueDate");


    // }); 
    
    function FuncUpdateStatus() { 
        console.log("FuncUpdateStatus");
        $("#CreateForm").attr("action", '@Url.Action("UpdateStatus","Works")');
        $("#CreateForm").submit();
    }

    // var DuedateE = document.getElementById("DueDate");
    // var statusE = document.getElementById("StatusID");
    // var ShowStatus = document.getElementById("ShowStatus");
    // var ischange = false;

    // document.addEventListener("DOMContentLoaded", () => {
    //     console.log(ShowStatus);
    //     ShowStatus.textContent = '@StatusBag.Where(n => n.Value == Model.Last().StatusID.ToString()).First().Text';
    // });

    // DuedateE.addEventListener("change", () => {
    //     console.log(statusE);
    //     console.log(DuedateE);
    //     console.log(ischange);

    //     if (!ischange) {
    //         statusE.value = 2; 
    //         ischange = true;
    //     }
    //     else {  
    //         statusE.value = 1;
    //         ischange = false;
    //     }
    // });

</script>
